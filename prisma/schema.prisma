// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  fullName   String
  email      String   @unique
  password   String
  mobile     String?
  address    String?
  role       UserRole @default(user)
  profileImg String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewRatings ReviewRating[]
  bookings      Booking[]
  notifications Notification[]
  feedbacks     Feedback[]
  blogs         Blog[]

  @@map("users")
}

model Service {
  id          String          @id @default(uuid())
  serviceNo   String          @unique
  serviceName String
  description String
  category    ServiceCategory
  photo       String?
  price       Int
  status      ServiceStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewRatings ReviewRating[]
  bookings      Booking[]

  @@map("services")
}

model ReviewRating {
  id String @id @default(uuid())

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  review String
  rating Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Booking {
  id        String @id @default(uuid())
  bookingNo String @unique

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  scheduleTime DateTime
  price        Int
  status       BookingStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Notification {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  notification String
  viewed       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Feedback {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  comment    String
  suggestion String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Blog {
  id          String  @id @default(uuid())
  title       String
  description String
  photo       String?
  userId      String
  writtenBy   User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Faq {
  id       String @id @default(uuid())
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

// ENUMS
enum UserRole {
  super_admin
  admin
  user
}

enum ServiceCategory {
  male
  female
}

enum ServiceStatus {
  upcoming
  available
  notAvailable
}

enum BookingStatus {
  pending
  confirmed
  canceled
  completed
}
